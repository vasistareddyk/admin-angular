{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_onDeleteComplete","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","max","toFixed","sizeSymbols","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","_onBeforeAutoRetry","autoAttemptDelay","itemLimit","onManualRetry","clearTimeout","storedItemIndex","expunge","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","errorMessage","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","hasMoreParts","remaining","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","inProgress","connectionManager","available","uploadChunk","clearCachedChunk","responseToReport","inProgressChunkIdx","_maybePersistChunkedState","inProgressIdx","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","free","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","WindowReceiveMessage","expungeFile","stopReceivingMessages","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","receiveMessage","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.11.5\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var id = this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL\n            });\n\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n            if (sessionData.thumbnailUrl) {\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\n            }\n\n            this._netUploaded++;\n            this._netUploadedOrQueued++;\n\n            return id;\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        self._options.callbacks.onUpload(id, name);\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData) {\n                        return self._options.callbacks.onResume(id, name, chunkData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Retrying \" + name + \"...\");\n                    self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, self._options.retry.autoAttemptDelay * 1000);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n                this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n                // For error reporting, we only have access to the response status if this is not\n                // an `XDomainRequest`.\n                if (xhrOrXdr.withCredentials === undefined) {\n                    this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n                }\n                else {\n                    this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n                }\n            }\n            else {\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id, name, responseJSON) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                params: {},\n                paramsInBody: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                }\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                resuming = handler._getFileState(id).attemptingResume,\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\n\n            if (handler._getFileState(id).loaded == null) {\n                handler._getFileState(id).loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                handler.uploadChunk(id, chunkIdx, resuming).then(\n                    // upload chunk success\n                    function success(response, xhr) {\n                        log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                        handler.clearCachedChunk(id, chunkIdx);\n\n                        var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                            responseToReport = upload.normalizeResponse(response, true),\n                            inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                        log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                        chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                        if (inProgressChunkIdx >= 0) {\n                            inProgressChunks.splice(inProgressChunkIdx, 1);\n                        }\n\n                        handler._maybePersistChunkedState(id);\n\n                        if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                            chunked.finalize(id);\n                        }\n                        else if (chunked.hasMoreParts(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                        }\n                    },\n\n                    // upload chunk failure\n                    function failure(response, xhr) {\n                        log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n                        handler.clearCachedChunk(id, chunkIdx);\n\n                        var responseToReport = upload.normalizeResponse(response, false),\n                            inProgressIdx;\n\n                        if (responseToReport.reset) {\n                            chunked.reset(id);\n                        }\n                        else {\n                            inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                            if (inProgressIdx >= 0) {\n                                handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                                handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                            }\n                        }\n\n                        // We may have aborted all other in-progress chunks for this file due to a failure.\n                        // If so, ignore the failures associated with those aborts.\n                        if (!handler._getFileState(id).temp.ignoreFailure) {\n                            // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                            // chunks since they will be explicitly aborted\n                            if (concurrentChunkingPossible) {\n                                handler._getFileState(id).temp.ignoreFailure = true;\n\n                                log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                                qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                                    log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                                    ckXhr.abort();\n                                    // Flag the transport, in case we are waiting for some other async operation\n                                    // to complete before attempting to upload the chunk\n                                    ckXhr._cancelled = true;\n                                });\n\n                                // We must indicate that all aborted chunks are no longer in progress\n                                handler.moveInProgressToRemaining(id);\n\n                                // Free up any connections used by these chunks, but don't allow any\n                                // other files to take up the connections (until we have exhausted all auto-retries)\n                                connectionManager.free(id, true);\n                            }\n\n                            if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                                // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                                // if a chunk succeeds immediately after one fails before we have determined if the upload\n                                // is a failure or not.\n                                upload.cleanup(id, responseToReport, xhr);\n                            }\n                        }\n                    }\n                )\n                    .done(function() {\n                        handler.clearXhr(id, chunkIdx);\n                    });\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name);\n\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                chunked.sendNext(id);\n            }\n            else {\n                simple.send(id, name);\n            }\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\nqq.s3 = qq.s3 || {};\n\nqq.s3.util = qq.s3.util || (function() {\n    \"use strict\";\n\n    return {\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\n\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\n\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\n\n        DATE_PARAM_NAME: \"x-amz-date\",\n\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\n\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\n\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\n\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\n\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\n\n        CASE_SENSITIVE_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNSIGNABLE_REST_HEADER_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNPREFIXED_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\",\n            \"x-amz-server-side-encryption-customer-algorithm\",\n            \"x-amz-server-side-encryption-customer-key\",\n            \"x-amz-server-side-encryption-customer-key-MD5\"\n        ],\n\n        /**\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\n         *\n         * Examples of some valid endpoints are:\n         *     http://foo.s3.amazonaws.com\n         *     https://foo.s3.amazonaws.com\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\n         *     foo.s3.amazonaws.com\n         *     http://foo.bar.com\n         *     http://s3.amazonaws.com/foo.bar.com\n         * ...etc\n         *\n         * @param endpoint The bucket's URL.\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\n         */\n        getBucket: function(endpoint) {\n            var patterns = [\n                    //bucket in domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\n                    //bucket in path\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\n                    //custom domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\n                ],\n                bucket;\n\n            qq.each(patterns, function(idx, pattern) {\n                var match = pattern.exec(endpoint);\n\n                if (match) {\n                    bucket = match[1];\n                    return false;\n                }\n            });\n\n            return bucket;\n        },\n\n        /** Create Prefixed request headers which are appropriate for S3.\n         *\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\n         * it along without a metadata prefix. For all other request header parameter names,\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                return name;\n            }\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\n        },\n\n        /**\n         * Create a policy document to be signed and sent along with the S3 upload request.\n         *\n         * @param spec Object with properties use to construct the policy document.\n         * @returns {Object} Policy doc.\n         */\n        getPolicy: function(spec) {\n            var policy = {},\n                conditions = [],\n                bucket = spec.bucket,\n                date = spec.date,\n                drift = spec.clockDrift,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                type = spec.type,\n                expectedStatus = spec.expectedStatus,\n                sessionToken = spec.sessionToken,\n                params = spec.params,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                minFileSize = spec.minFileSize,\n                maxFileSize = spec.maxFileSize,\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion;\n\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\n\n            conditions.push({acl: acl});\n            conditions.push({bucket: bucket});\n\n            if (type) {\n                conditions.push({\"Content-Type\": type});\n            }\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                conditions.push({success_action_status: expectedStatus.toString()});\n            }\n\n            if (successRedirectUrl) {\n                conditions.push({success_action_redirect: successRedirectUrl});\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            if (serverSideEncryption) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (signatureVersion === 2) {\n                conditions.push({key: key});\n            }\n            else if (signatureVersion === 4) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n\n                conditions.push({});\n                conditions[conditions.length - 1].key = key;\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\n                    qq.s3.util.getV4PolicyDate(date, drift);\n            }\n\n            // user metadata\n            qq.each(params, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\n                    param = {};\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    param[awsParamName] = val;\n                }\n                else {\n                    param[awsParamName] = encodeURIComponent(val);\n                }\n\n                conditions.push(param);\n            });\n\n            policy.conditions = conditions;\n\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\n\n            return policy;\n        },\n\n        /**\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\n         * update the session token.  This is only relevant if requests are being signed client-side.\n         *\n         * @param policy Live policy document\n         * @param newSessionToken Updated session token.\n         */\n        refreshPolicyCredentials: function(policy, newSessionToken) {\n            var sessionTokenFound = false;\n\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\n                        oldCondObj[oldCondName] = newSessionToken;\n                        sessionTokenFound = true;\n                    }\n                });\n            });\n\n            if (!sessionTokenFound) {\n                policy.conditions.push({});\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\n            }\n        },\n\n        /**\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\n         * still possible for a malicious user to tamper with these values during policy document generation,\n         * before it is sent to the server for signing.\n         *\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\n         */\n        generateAwsParams: function(spec, signPolicyCallback) {\n            var awsParams = {},\n                customParams = spec.params,\n                promise = new qq.Promise(),\n                sessionToken = spec.sessionToken,\n                drift = spec.clockDrift,\n                type = spec.type,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                expectedStatus = spec.expectedStatus,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion,\n                now = new Date(),\n                log = spec.log,\n                policyJson;\n\n            spec.date = now;\n            policyJson = qq.s3.util.getPolicy(spec);\n\n            awsParams.key = key;\n\n            if (type) {\n                awsParams[\"Content-Type\"] = type;\n            }\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                awsParams.success_action_status = expectedStatus;\n            }\n\n            if (successRedirectUrl) {\n                awsParams.success_action_redirect = successRedirectUrl;\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (serverSideEncryption) {\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            awsParams.acl = acl;\n\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\n            // Prefixed param values will be URI encoded as well.\n            qq.each(customParams, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    awsParams[awsParamName] = val;\n                }\n                else {\n                    awsParams[awsParamName] = encodeURIComponent(val);\n                }\n            });\n\n            if (signatureVersion === 2) {\n                awsParams.AWSAccessKeyId = accessKey;\n            }\n            else if (signatureVersion === 4) {\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\n            }\n\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\n            // HMAC signature for the policy doc.\n            signPolicyCallback(policyJson).then(\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\n                    awsParams.policy = policyAndSignature.policy;\n\n                    if (spec.signatureVersion === 2) {\n                        awsParams.signature = policyAndSignature.signature;\n\n                        if (updatedAccessKey) {\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\n                        }\n                    }\n                    else if (spec.signatureVersion === 4) {\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\n                    }\n\n                    if (updatedSessionToken) {\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                    }\n\n                    promise.success(awsParams);\n                },\n                function(errorMessage) {\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\n                                                   \"a valid signature and policy from the server.\";\n\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\n                    promise.failure(errorMessage);\n                }\n            );\n\n            return promise;\n        },\n\n        /**\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\n         * checks already in place.\n         *\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\n         * @param minSize Minimum acceptable size, in bytes\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\n         */\n        enforceSizeLimits: function(policy, minSize, maxSize) {\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\n\n            if (minSize > 0 || maxSize > 0) {\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\n            }\n        },\n\n        getPolicyExpirationDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\n        },\n\n        getCredentialsDate: function(date) {\n            return date.getUTCFullYear() + \"\" +\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\n                (\"0\" + date.getUTCDate()).slice(-2);\n        },\n\n        getPolicyDate: function(date, _minutesToAdd_) {\n            var minutesToAdd = _minutesToAdd_ || 0,\n                pad, r;\n\n            /*jshint -W014 */\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\n\n            if (Date.prototype.toISOString) {\n                return date.toISOString();\n            }\n            else {\n                pad = function(number) {\n                    r = String(number);\n\n                    if (r.length === 1) {\n                        r = \"0\" + r;\n                    }\n\n                    return r;\n                };\n\n                return date.getUTCFullYear()\n                    + \"-\" + pad(date.getUTCMonth() + 1)\n                    + \"-\" + pad(date.getUTCDate())\n                    + \"T\" + pad(date.getUTCHours())\n                    + \":\" + pad(date.getUTCMinutes())\n                    + \":\" + pad(date.getUTCSeconds())\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                    + \"Z\";\n            }\n        },\n\n        /**\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\n         * the associated resource.\n         *\n         * @param iframe Iframe containing response\n         * @returns {{bucket: *, key: *, etag: *}}\n         */\n        parseIframeResponse: function(iframe) {\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\n                queryString = doc.location.search,\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\n\n            if (match) {\n                return {\n                    bucket: match[1],\n                    key: match[2],\n                    etag: match[3].replace(/%22/g, \"\")\n                };\n            }\n        },\n\n        /**\n         * @param successRedirectUrl Relative or absolute location of success redirect page\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\n         */\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\n            if (successRedirectUrl) {\n                var targetAnchorContainer = document.createElement(\"div\"),\n                    targetAnchor;\n\n                if (qq.ie7()) {\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\n                    targetAnchor = targetAnchorContainer.firstChild;\n                    return targetAnchor.href;\n                }\n                else {\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\n                    // in order to ensure relative URLs will be properly parsed.\n                    targetAnchor = document.createElement(\"a\");\n                    targetAnchor.href = successRedirectUrl;\n                    targetAnchor.href = targetAnchor.href;\n                    return targetAnchor.href;\n                }\n            }\n        },\n\n        getV4CredentialsString: function(spec) {\n            return spec.key + \"/\" +\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\n                spec.region + \"/s3/aws4_request\";\n        },\n\n        getV4PolicyDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\n                    \"Z\";\n        },\n\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\n        // and spaces are replaced with \"+\".\n        encodeQueryStringParam: function(param) {\n            var percentEncoded = encodeURIComponent(param);\n\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\n\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\n\n            // replace percent-encoded spaces with a \"+\"\n            return percentEncoded.replace(/%20/g, \"+\");\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return escape(\"/\" + decodeURIComponent(path));\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader;\n\n                if (qq.isBlob(body)) {\n                    // TODO hash blob in webworker if this becomes a notable perf issue\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\n *\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var getName = proxy.getName,\n        log = proxy.log,\n        clockDrift = spec.clockDrift,\n        expectedStatus = 200,\n        onGetBucket = spec.getBucket,\n        onGetHost = spec.getHost,\n        onGetKeyName = spec.getKeyName,\n        filenameParam = spec.filenameParam,\n        paramsStore = spec.paramsStore,\n        endpointStore = spec.endpointStore,\n        aclStore = spec.aclStore,\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\n        region = spec.objectProperties.region,\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\n        validation = spec.validation,\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\n        handler = this,\n        credentialsProvider = spec.signature.credentialsProvider,\n\n        chunked = {\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\n            // when the response to this request has been parsed.\n            combine: function(id) {\n                var uploadId = handler._getPersistableData(id).uploadId,\n                    etagMap = handler._getPersistableData(id).etags,\n                    result = new qq.Promise();\n\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\n                    result.success,\n\n                    function failure(reason, xhr) {\n                        result.failure(upload.done(id, xhr).response, xhr);\n                    }\n                );\n\n                return result;\n            },\n\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\n            // in the XML response and store that along with the associated part number.\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\n            done: function(id, xhr, chunkIdx) {\n                var response = upload.response.parse(id, xhr),\n                    etag;\n\n                if (response.success) {\n                    etag = xhr.getResponseHeader(\"ETag\");\n\n                    if (!handler._getPersistableData(id).etags) {\n                        handler._getPersistableData(id).etags = [];\n                    }\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\n                }\n            },\n\n            /**\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\n             * callback.\n             *\n             * @param id File ID\n             * @param chunkIdx Index of the chunk to PUT\n             * @returns {qq.Promise}\n             */\n            initHeaders: function(id, chunkIdx, blob) {\n                var headers = {},\n                    bucket = upload.bucket.getName(id),\n                    host = upload.host.getName(id),\n                    key = upload.key.urlSafe(id),\n                    promise = new qq.Promise(),\n                    signatureConstructor = requesters.restSignature.constructStringToSign\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\n                        .withPartNum(chunkIdx + 1)\n                        .withContent(blob)\n                        .withUploadId(handler._getPersistableData(id).uploadId);\n\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n                return promise;\n            },\n\n            put: function(id, chunkIdx) {\n                var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx),\n                    domain = spec.endpointStore.get(id),\n                    promise = new qq.Promise();\n\n                // Add appropriate headers to the multipart upload request.\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\n                    if (xhr._cancelled) {\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\n                        promise.failure({error: \"Chunk upload cancelled\"});\n                    }\n                    else {\n                        var url = domain + \"/\" + endOfUrl;\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\n                        xhr.open(\"PUT\", url, true);\n\n                        qq.each(headers, function(name, val) {\n                            xhr.setRequestHeader(name, val);\n                        });\n\n                        xhr.send(chunkData.blob);\n                    }\n                }, function() {\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\n                });\n\n                return promise;\n            },\n\n            send: function(id, chunkIdx) {\n                var promise = new qq.Promise();\n\n                chunked.setup(id).then(\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\n                    function() {\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\n                    },\n\n                    // We were unable to initiate the chunked upload process.\n                    function(errorMessage, xhr) {\n                        promise.failure({error: errorMessage}, xhr);\n                    }\n                );\n\n                return promise;\n            },\n\n            /**\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\n             * initiated.\n             *\n             * @param id Associated file ID\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\n             */\n            setup: function(id) {\n                var promise = new qq.Promise(),\n                    uploadId = handler._getPersistableData(id).uploadId,\n                    uploadIdPromise = new qq.Promise();\n\n                if (!uploadId) {\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\n                    requesters.initiateMultipart.send(id).then(\n                        function(uploadId) {\n                            handler._getPersistableData(id).uploadId = uploadId;\n                            uploadIdPromise.success(uploadId);\n                            promise.success(uploadId);\n                        },\n                        function(errorMsg, xhr) {\n                            handler._getPersistableData(id).uploadId = null;\n                            promise.failure(errorMsg, xhr);\n                            uploadIdPromise.failure(errorMsg, xhr);\n                        }\n                    );\n                }\n                else if (uploadId instanceof qq.Promise) {\n                    uploadId.then(function(uploadId) {\n                        promise.success(uploadId);\n                    });\n                }\n                else {\n                    promise.success(uploadId);\n                }\n\n                return promise;\n            }\n        },\n\n        requesters = {\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\n                filenameParam: filenameParam,\n                endpointStore: endpointStore,\n                paramsStore: paramsStore,\n                signatureSpec: signature,\n                aclStore: aclStore,\n                reducedRedundancy: reducedRedundancy,\n                serverSideEncryption: serverSideEncryption,\n                cors: spec.cors,\n                log: log,\n                getContentType: function(id) {\n                    return handler._getMimeType(id);\n                },\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                },\n                getName: function(id) {\n                    return getName(id);\n                }\n            }),\n\n            policySignature: new qq.s3.RequestSigner({\n                expectingPolicy: true,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            }),\n\n            restSignature: new qq.s3.RequestSigner({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            })\n        },\n\n        simple = {\n            /**\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\n             * due to some error.\n             *\n             * @param id File ID\n             * @returns {qq.Promise}\n             */\n            initParams: function(id) {\n                /*jshint -W040 */\n                var customParams = paramsStore.get(id);\n                customParams[filenameParam] = getName(id);\n\n                return qq.s3.util.generateAwsParams({\n                    endpoint: endpointStore.get(id),\n                    clockDrift: clockDrift,\n                    params: customParams,\n                    type: handler._getMimeType(id),\n                    bucket: upload.bucket.getName(id),\n                    key: handler.getThirdPartyFileId(id),\n                    accessKey: credentialsProvider.get().accessKey,\n                    sessionToken: credentialsProvider.get().sessionToken,\n                    acl: aclStore.get(id),\n                    expectedStatus: expectedStatus,\n                    minFileSize: validation.minSizeLimit,\n                    maxFileSize: validation.maxSizeLimit,\n                    reducedRedundancy: reducedRedundancy,\n                    region: region,\n                    serverSideEncryption: serverSideEncryption,\n                    signatureVersion: signature.version,\n                    log: log\n                },\n                qq.bind(requesters.policySignature.getSignature, this, id));\n            },\n\n            send: function(id) {\n                var promise = new qq.Promise(),\n                    xhr = handler._createXhr(id),\n                    fileOrBlob = handler.getFile(id);\n\n                handler._registerProgressHandler(id);\n                upload.track(id, xhr).then(promise.success, promise.failure);\n\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\n                    log(\"Sending upload request for \" + id);\n                    xhr.send(toSend);\n                }, promise.failure);\n\n                return promise;\n            },\n\n            /**\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\n             *\n             * Note that this is only used by the simple (non-chunked) upload process.\n             *\n             * @param id File ID\n             * @param xhr XMLHttpRequest to use for the upload\n             * @param fileOrBlob `File` or `Blob` to send\n             * @returns {qq.Promise}\n             */\n            setup: function(id, xhr, fileOrBlob) {\n                var formData = new FormData(),\n                    endpoint = endpointStore.get(id),\n                    url = endpoint,\n                    promise = new qq.Promise();\n\n                simple.initParams(id).then(\n                    // Success - all params determined\n                    function(awsParams) {\n                        xhr.open(\"POST\", url, true);\n\n                        qq.obj2FormData(awsParams, formData);\n\n                        // AWS requires the file field be named \"file\".\n                        formData.append(\"file\", fileOrBlob);\n\n                        promise.success(formData);\n                    },\n\n                    // Failure - we couldn't determine some params (likely the signature)\n                    function(errorMessage) {\n                        promise.failure({error: errorMessage});\n                    }\n                );\n\n                return promise;\n            }\n        },\n\n        upload = {\n            /**\n             * Note that this is called when an upload has reached a termination point,\n             * regardless of success/failure.  For example, it is called when we have\n             * encountered an error during the upload or when the file may have uploaded successfully.\n             *\n             * @param id file ID\n             */\n            bucket: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedBucket = handler._getFileState(id).bucket;\n\n                    if (cachedBucket) {\n                        promise.success(cachedBucket);\n                    }\n                    else {\n                        onGetBucket(id).then(function(bucket) {\n                            handler._getFileState(id).bucket = bucket;\n                            promise.success(bucket);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).bucket;\n                }\n            },\n\n            host: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedHost = handler._getFileState(id).host;\n\n                    if (cachedHost) {\n                        promise.success(cachedHost);\n                    }\n                    else {\n                        onGetHost(id).then(function(host) {\n                            handler._getFileState(id).host = host;\n                            promise.success(host);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).host;\n                }\n            },\n\n            done: function(id, xhr) {\n                var response = upload.response.parse(id, xhr),\n                    isError = response.success !== true;\n\n                if (isError && upload.response.shouldReset(response.code)) {\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\n                    response.reset = true;\n                }\n\n                return {\n                    success: !isError,\n                    response: response\n                };\n            },\n\n            key: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        key = handler.getThirdPartyFileId(id);\n\n                    /* jshint eqnull:true */\n                    if (key == null) {\n                        handler._setThirdPartyFileId(id, promise);\n                        onGetKeyName(id, getName(id)).then(\n                            function(keyName) {\n                                handler._setThirdPartyFileId(id, keyName);\n                                promise.success(keyName);\n                            },\n                            function(errorReason) {\n                                handler._setThirdPartyFileId(id, null);\n                                promise.failure(errorReason);\n                            }\n                        );\n                    }\n                    else if (qq.isGenericPromise(key)) {\n                        key.then(promise.success, promise.failure);\n                    }\n                    else {\n                        promise.success(key);\n                    }\n\n                    return promise;\n                },\n\n                urlSafe: function(id) {\n                    var encodedKey = encodeURIComponent(handler.getThirdPartyFileId(id));\n                    return encodedKey.replace(/%2F/g, \"/\");\n                }\n            },\n\n            response: {\n                parse: function(id, xhr) {\n                    var response = {},\n                        parsedErrorProps;\n\n                    try {\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n\n                        if (xhr.status === expectedStatus) {\n                            response.success = true;\n                        }\n                        else {\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\n\n                            if (parsedErrorProps) {\n                                response.error = parsedErrorProps.message;\n                                response.code = parsedErrorProps.code;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n                    }\n\n                    return response;\n                },\n\n                /**\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\n                 *\n                 * @param awsResponseXml XML response from AWS\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\n                 */\n                parseError: function(awsResponseXml) {\n                    var parser = new DOMParser(),\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\n                        errorDetails = {},\n                        codeEls, messageEls;\n\n                    if (errorEls.length) {\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\n\n                        if (messageEls.length) {\n                            errorDetails.message = messageEls[0].textContent;\n                        }\n\n                        if (codeEls.length) {\n                            errorDetails.code = codeEls[0].textContent;\n                        }\n\n                        return errorDetails;\n                    }\n                },\n\n                // Determine if the upload should be restarted on the next retry attempt\n                // based on the error code returned in the response from AWS.\n                shouldReset: function(errorCode) {\n                    /*jshint -W014 */\n                    return errorCode === \"EntityTooSmall\"\n                        || errorCode === \"InvalidPart\"\n                        || errorCode === \"InvalidPartOrder\"\n                        || errorCode === \"NoSuchUpload\";\n                }\n            },\n\n            start: function(id, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                upload.key.promise(id).then(function() {\n                    upload.bucket.promise(id).then(function() {\n                        upload.host.promise(id).then(function() {\n                            /* jshint eqnull:true */\n                            if (optChunkIdx == null) {\n                                simple.send(id).then(promise.success, promise.failure);\n                            }\n                            else {\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\n                            }\n                        });\n                    });\n                },\n                function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n\n                return promise;\n            },\n\n            track: function(id, xhr, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        var result;\n\n                        /* jshint eqnull:true */\n                        if (optChunkIdx == null) {\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                        else {\n                            chunked.done(id, xhr, optChunkIdx);\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                    }\n                };\n\n                return promise;\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: upload.start,\n        uploadFile: upload.start\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"s3\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\n\n                if (uploadId !== undefined && existedInLocalStorage) {\n                    requesters.abortMultipart.send(id, uploadId);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return chunked.combine(id);\n            },\n\n            _getLocalStorageId: function(id) {\n                var baseStorageId = super_._getLocalStorageId(id),\n                    bucketName = upload.bucket.getName(id);\n\n                return baseStorageId + \"-\" + bucketName;\n            }\n        };\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (newStatus === qq.status.UPLOAD_RETRYING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}